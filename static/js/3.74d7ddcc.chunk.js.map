{"version":3,"sources":["../node_modules/id3js/lib/localReader.js"],"names":["LocalReader","path","_path","a","Promise","resolve","reject","fs","err","stat","size","openErr","fd","_fd","undefined","Error","length","position","buffer","Buffer","alloc","_bytesRead","ab","ArrayBuffer","view","Uint8Array","i","Reader"],"mappings":"gQAKaA,EAAb,kDAII,WAAYC,GAAM,kCACd,gBACKC,MAAQD,EAFC,EAJtB,+EASI,iCAAAE,EAAA,+EACW,IAAIC,SAAQ,SAACC,EAASC,GACzBC,OAAQ,EAAKL,OAAO,SAACM,EAAKC,GAClBD,EACAF,EAAOE,IAGX,EAAKE,KAAOD,EAAKC,KACjBH,OAAQ,EAAKL,MAAO,KAAK,SAACS,EAASC,GAC3BD,EACAL,EAAOE,IAGX,EAAKK,IAAMD,EACXP,gBAdhB,2CATJ,gHA6BI,iCAAAF,EAAA,+EACW,IAAIC,SAAQ,SAACC,EAASC,QACRQ,IAAb,EAAKD,IAITN,QAAS,EAAKM,KAAK,SAACL,GACZA,EACAF,EAAOE,GAGPH,OARJC,EAAO,IAAIS,MAAM,8BAH7B,2CA7BJ,+GA8CI,WAAWC,EAAQC,GAAnB,sBAAAd,EAAA,6DACUe,EAASC,EAAOC,MAAMJ,GADhC,kBAEW,IAAIZ,SAAQ,SAACC,EAASC,QACRQ,IAAb,EAAKD,IAITN,OAAQ,EAAKM,IAAKK,EAAQ,EAAGF,EAAQC,GAAU,SAACT,EAAKa,EAAYH,GAC7D,GAAIV,EACA,OAAOF,EAAOE,GAIlB,IAFA,IAAMc,EAAK,IAAIC,YAAYL,EAAOF,QAC5BQ,EAAO,IAAIC,WAAWH,GACnBI,EAAI,EAAGA,EAAIR,EAAOF,OAAQU,IAC/BF,EAAKE,GAAKR,EAAOQ,GAErBrB,EAAQiB,MAZRhB,EAAO,IAAIS,MAAM,8BAJ7B,2CA9CJ,8DAAiCY,M","file":"static/js/3.74d7ddcc.chunk.js","sourcesContent":["import { Reader } from './reader.js';\nimport * as fs from 'fs';\n/**\n * Provides read access to the local file system\n */\nexport class LocalReader extends Reader {\n    /**\n     * @param {string} path Path of the local file\n     */\n    constructor(path) {\n        super();\n        this._path = path;\n    }\n    /** @inheritdoc */\n    async open() {\n        return new Promise((resolve, reject) => {\n            fs.stat(this._path, (err, stat) => {\n                if (err) {\n                    reject(err);\n                    return;\n                }\n                this.size = stat.size;\n                fs.open(this._path, 'r', (openErr, fd) => {\n                    if (openErr) {\n                        reject(err);\n                        return;\n                    }\n                    this._fd = fd;\n                    resolve();\n                });\n            });\n        });\n    }\n    /** @inheritdoc */\n    async close() {\n        return new Promise((resolve, reject) => {\n            if (this._fd === undefined) {\n                reject(new Error('Resource not yet open'));\n                return;\n            }\n            fs.close(this._fd, (err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    /** @inheritdoc */\n    async read(length, position) {\n        const buffer = Buffer.alloc(length);\n        return new Promise((resolve, reject) => {\n            if (this._fd === undefined) {\n                reject(new Error('Resource not yet open'));\n                return;\n            }\n            fs.read(this._fd, buffer, 0, length, position, (err, _bytesRead, buffer) => {\n                if (err) {\n                    return reject(err);\n                }\n                const ab = new ArrayBuffer(buffer.length);\n                const view = new Uint8Array(ab);\n                for (let i = 0; i < buffer.length; i++) {\n                    view[i] = buffer[i];\n                }\n                resolve(ab);\n            });\n        });\n    }\n}\n"],"sourceRoot":""}